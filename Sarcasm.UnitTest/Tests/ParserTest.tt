#region License
/*
    This file is part of Sarcasm.

    Copyright 2012-2013 Dávid Németi

    Sarcasm is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Sarcasm is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with Sarcasm.  If not, see <http://www.gnu.org/licenses/>.
*/
#endregion

<#@ template debug="true" hostSpecific="true" language="C#" #>
<#@ output extension="generated.cs" #>
<#@ assembly Name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #> 

extern alias globalMiniPL;

using System;
using System.IO;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using Irony;
using Irony.Ast;
using Irony.Parsing;
using Sarcasm;
using Sarcasm.GrammarAst;
using Sarcasm.Unparsing;

using globalMiniPL::MiniPL.DomainDefinitions;

using Grammar = Sarcasm.GrammarAst.Grammar;

namespace Sarcasm.UnitTest
{
    public partial class ParserTest
    {
<#
    string testFileDirPath = Host.ResolvePath(@"..\Test files");
    foreach (string filePath in Directory.GetFiles(testFileDirPath))
    {
        GenerateTestMethod(filePath, typesafe: true);
        GenerateTestMethod(filePath, typesafe: false);
    }
#>
    }
}

<#+
void GenerateTestMethod(string filePath, bool typesafe)
{
    string extension = Path.GetExtension(filePath);
    string filename = Path.GetFileName(filePath);
    string parseTestMethodName = "Parse_" + Path.GetFileNameWithoutExtension(filePath) + (typesafe ? "_TS" : string.Empty);
    string parseMethodName = typesafe ? "ParseFileSaveAstAndCheckTS" : "ParseFileSaveAstAndCheck";

    if (extension == ".mplp")
    {
#>
        [TestMethod]
        [TestCategory(category)]
        public void <#= parseTestMethodName #>_Root()
        {
            <#= parseMethodName.Replace("TS", string.Empty) #>("<#= filename #>");
        }

        [TestMethod]
        [TestCategory(category)]
        public void <#= parseTestMethodName #>()
        {
            <#= parseMethodName #>(B.Program, "<#= filename #>");
        }

<#+
    }
    else if (extension == ".expr")
    {
#>
        [TestMethod]
        [TestCategory(category)]
        public void <#= parseTestMethodName #>()
        {
            <#= parseMethodName #>(B.Expression, "<#= filename #>");
        }

<#+
    }
    else
        throw new ApplicationException(string.Format("Unknown file extension: \"{0}\"", extension));
}
#>
