<#@ template debug="true" hostSpecific="true" language="C#" #>
<#@ output extension="generated.cs" #>
<#@ assembly Name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #> 

using System;
using System.IO;
using System.Linq;
using Microsoft.VisualStudio.TestTools.UnitTesting;

using Irony;
using Irony.Ast;
using Irony.Parsing;
using Sarcasm;
using Sarcasm.Ast;
using Sarcasm.Unparsing;

using MiniPL.DomainModel;

using Grammar = Sarcasm.Ast.Grammar;

namespace Sarcasm.UnitTest
{
    public partial class UnparserTest
    {
<#
	string testFileDirPath = Host.ResolvePath(@"..\Test files");
    foreach (string filePath in Directory.GetFiles(testFileDirPath))
    {
        GenerateTestMethod(filePath, typesafe: true, leftToRight: true);
        GenerateTestMethod(filePath, typesafe: false, leftToRight: true);
        GenerateTestMethod(filePath, typesafe: true, leftToRight: false);
    }
#>
	}
}

<#+
void GenerateTestMethod(string filePath, bool typesafe, bool leftToRight)
{
    string extension = Path.GetExtension(filePath);
    string filename = Path.GetFileName(filePath);

    string reunparseTestMethodName = "Unparse_" + Path.GetFileNameWithoutExtension(filePath);
    if (typesafe) reunparseTestMethodName += "_Typesafe";
    if (!leftToRight) reunparseTestMethodName += "_Reversed";

    string reunparseMethodName = "ReunparseCheck";
    if (typesafe) reunparseMethodName += "TS";

    if (extension == ".mplp")
    {
#>
        [TestMethod]
        [TestCategory(category)]
        public void <#= reunparseTestMethodName #>()
        {
<#+
        GenerateInitializerForUnparser(filePath);
#>
            <#= reunparseMethodName #>(B.Program, "<#= filename #>", leftToRight: <#= leftToRight ? "true" : "false" #>);
        }

<#+
    }
    else if (extension == ".expr")
    {
#>
        [TestMethod]
        [TestCategory(category)]
        public void <#= reunparseTestMethodName #>()
        {
<#+
        GenerateInitializerForUnparser(filePath);
#>
            <#= reunparseMethodName #>(B.Expression, "<#= filename #>", leftToRight: <#= leftToRight ? "true" : "false" #>);
        }

<#+
    }
    else
        throw new ApplicationException(string.Format("Unknown file extension: \"{0}\"", extension));
}

void GenerateInitializerForUnparser(string filePath)
{
        string formatting;

        if (Path.GetFileNameWithoutExtension(filePath) == "MiniPL2")
            formatting = "formatting2";
        else if (Path.GetFileNameWithoutExtension(filePath) == "MiniPL3")
            formatting = "formatting3";
        else
            formatting = "formattingDefault";
#>
            unparser.Formatting = <#= formatting #>;
<#+
}
#>
