#region License
/*
    This file is part of Sarcasm.

    Copyright 2012-2013 Dávid Németi

    Sarcasm is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Sarcasm is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with Sarcasm.  If not, see <http://www.gnu.org/licenses/>.
*/
#endregion


program HelloWorld

namespace Sea.Shell

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

function Fibonacci(var n : integer) : integer
begin
    if (n = 0) then
        return 0;
    else if (n = 1) then
        return 1;
    else
        return Fibonacci(n - 1) + Fibonacci(n - 2);
end

begin
    var number : integer := 5;
    var just_for_test : boolean := True;
    WriteLn(number, 'th Fibonacci number: ', Fibonacci(number));
end.