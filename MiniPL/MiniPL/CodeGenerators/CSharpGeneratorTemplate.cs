// ------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version: 11.0.0.0
//  
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
// ------------------------------------------------------------------------------
namespace MiniPL.CodeGenerators
{
    using System.Linq;
    using System.Text;
    using System.Collections.Generic;
    using MiniPL.DomainDefinitions;
    using Expr.DomainDefinitions;
    using System;
    
    /// <summary>
    /// Class to produce the template output
    /// </summary>
    
    #line 1 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public partial class CSharpGeneratorTemplate : CSharpGeneratorTemplateBase
    {
#line hidden
        /// <summary>
        /// Create the template output
        /// </summary>
        public virtual string TransformText()
        {
            this.Write("using System;\r\nusing System.IO;\r\n\r\nnamespace ");
            
            #line 12 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Program.Namespace));
            
            #line default
            #line hidden
            this.Write("\r\n{\r\n    public static class ");
            
            #line 14 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(Program.Name));
            
            #line default
            #line hidden
            this.Write("\r\n    {\r\n        public static void Main()\r\n        {\r\n");
            
            #line 18 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"

    PushIndent(indent);
    Generate(Program.Body);
    PopIndent();

            
            #line default
            #line hidden
            this.Write("        }\r\n\r\n");
            
            #line 25 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"

    foreach (Function function in Program.Functions)
    {

            
            #line default
            #line hidden
            this.Write("        public static ");
            
            #line 29 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(function.ReturnType != null ? GetTypeString(function.ReturnType.Value) : "void"));
            
            #line default
            #line hidden
            this.Write(" ");
            
            #line 29 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(function.Name));
            
            #line default
            #line hidden
            this.Write("(");
            
            #line 29 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
            this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(", ", function.Parameters.Select(parameter => GetTypeString(parameter.Type) + " " + parameter.Name))));
            
            #line default
            #line hidden
            this.Write(")\r\n        {\r\n");
            
            #line 31 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"

    PushIndent(indent);
    Generate(function.Body);
    PopIndent();

            
            #line default
            #line hidden
            this.Write("        }\r\n\r\n");
            
            #line 38 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"

    }

            
            #line default
            #line hidden
            this.Write("    }\r\n}\r\n\r\n");
            return this.GenerationEnvironment.ToString();
        }
        
        #line 44 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"

void Generate(IEnumerable<Statement> statements)
{
    foreach (var statement in statements)
        Generate(statement);
}

void Generate(Statement statement)
{
    PushIndent(indent);

    if (statement is StatementList)
    {
        Generate(((StatementList)statement).Body);
    }
    else if (statement is LocalVariable)
    {
        var localVariable = (LocalVariable)statement;

        if (localVariable.InitValue != null)
        {

        
        #line default
        #line hidden
        
        #line 65 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
this.Write("    ");

        
        #line default
        #line hidden
        
        #line 66 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(GetLocalVariableString(localVariable)));

        
        #line default
        #line hidden
        
        #line 66 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
this.Write(";\r\n");

        
        #line default
        #line hidden
        
        #line 67 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"

        }
        else
        {

        
        #line default
        #line hidden
        
        #line 71 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
this.Write("    ");

        
        #line default
        #line hidden
        
        #line 72 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(GetTypeString(localVariable.Type)));

        
        #line default
        #line hidden
        
        #line 72 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
this.Write(" ");

        
        #line default
        #line hidden
        
        #line 72 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(localVariable.Name));

        
        #line default
        #line hidden
        
        #line 72 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
this.Write(";\r\n");

        
        #line default
        #line hidden
        
        #line 73 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"

        }
    }
    else if (statement is Assignment)
    {
        var assignment = (Assignment)statement;

        
        #line default
        #line hidden
        
        #line 79 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
this.Write("    ");

        
        #line default
        #line hidden
        
        #line 80 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(GetAssignmentString(assignment)));

        
        #line default
        #line hidden
        
        #line 80 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
this.Write(";\r\n");

        
        #line default
        #line hidden
        
        #line 81 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"

    }
    else if (statement is Return)
    {
        var @return = (Return)statement;

        
        #line default
        #line hidden
        
        #line 86 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
this.Write("    return ");

        
        #line default
        #line hidden
        
        #line 87 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(GetExpressionString(@return.Value)));

        
        #line default
        #line hidden
        
        #line 87 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
this.Write(";\r\n");

        
        #line default
        #line hidden
        
        #line 88 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"

    }
    else if (statement is While)
    {
        var @while = (While)statement;

        
        #line default
        #line hidden
        
        #line 93 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
this.Write("    while (");

        
        #line default
        #line hidden
        
        #line 94 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(GetExpressionString(@while.Condition)));

        
        #line default
        #line hidden
        
        #line 94 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
this.Write(")\r\n    {\r\n");

        
        #line default
        #line hidden
        
        #line 96 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
 Generate(@while.Body); 
        
        #line default
        #line hidden
        
        #line 96 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
this.Write("    }\r\n");

        
        #line default
        #line hidden
        
        #line 98 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"

    }
    else if (statement is For)
    {
        var @for = (For)statement;

        
        #line default
        #line hidden
        
        #line 103 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
this.Write("    for (");

        
        #line default
        #line hidden
        
        #line 104 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(", ", @for.Init.Select(localVariable => GetLocalVariableString(localVariable)))));

        
        #line default
        #line hidden
        
        #line 104 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
this.Write("; ");

        
        #line default
        #line hidden
        
        #line 104 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(GetExpressionString(@for.Condition)));

        
        #line default
        #line hidden
        
        #line 104 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
this.Write("; ");

        
        #line default
        #line hidden
        
        #line 104 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(", ", @for.Update.Select(assignment => GetAssignmentString(assignment)))));

        
        #line default
        #line hidden
        
        #line 104 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
this.Write(")\r\n    {\r\n");

        
        #line default
        #line hidden
        
        #line 106 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
 Generate(@for.Body); 
        
        #line default
        #line hidden
        
        #line 106 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
this.Write("    }\r\n");

        
        #line default
        #line hidden
        
        #line 108 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"

    }
    else if (statement is Write)
    {
        var write = (Write)statement;

        
        #line default
        #line hidden
        
        #line 113 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
this.Write("    Console.Write(");

        
        #line default
        #line hidden
        
        #line 114 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(" + ", write.Arguments.Select(argument => GetExpressionString(argument)))));

        
        #line default
        #line hidden
        
        #line 114 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
this.Write(");\r\n");

        
        #line default
        #line hidden
        
        #line 115 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"

    }
    else if (statement is WriteLn)
    {
        var writeLn = (WriteLn)statement;

        
        #line default
        #line hidden
        
        #line 120 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
this.Write("    Console.WriteLine(");

        
        #line default
        #line hidden
        
        #line 121 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(string.Join(" + ", writeLn.Arguments.Select(argument => GetExpressionString(argument)))));

        
        #line default
        #line hidden
        
        #line 121 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
this.Write(");\r\n");

        
        #line default
        #line hidden
        
        #line 122 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"

    }
    else if (statement is If)
    {
        var @if = (If)statement;

        
        #line default
        #line hidden
        
        #line 127 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
this.Write("    if (");

        
        #line default
        #line hidden
        
        #line 128 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(GetExpressionString(@if.Condition)));

        
        #line default
        #line hidden
        
        #line 128 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
this.Write(")\r\n    {\r\n");

        
        #line default
        #line hidden
        
        #line 130 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"

        Generate(@if.Body);

        
        #line default
        #line hidden
        
        #line 132 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
this.Write("    }\r\n");

        
        #line default
        #line hidden
        
        #line 134 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"

        if (@if.ElseBody != null)
        {

        
        #line default
        #line hidden
        
        #line 137 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
this.Write("    else\r\n    {\r\n");

        
        #line default
        #line hidden
        
        #line 140 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"

        Generate(@if.ElseBody);

        
        #line default
        #line hidden
        
        #line 142 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
this.Write("    }\r\n");

        
        #line default
        #line hidden
        
        #line 144 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"

        }
    }
    else if (statement is FunctionCall)
    {
        var functionCall = (FunctionCall)statement;

        
        #line default
        #line hidden
        
        #line 150 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
this.Write("    ");

        
        #line default
        #line hidden
        
        #line 151 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
this.Write(this.ToStringHelper.ToStringWithCulture(GetExpressionString(functionCall)));

        
        #line default
        #line hidden
        
        #line 151 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"
this.Write(");\r\n");

        
        #line default
        #line hidden
        
        #line 152 "C:\Users\dave\Documents\Programming\Sarcasm\MiniPL\MiniPL\CodeGenerators\CSharpGeneratorTemplate.tt"

    }
    else
        throw new ArgumentException("Unknown statement: " + statement, "statement");

    PopIndent();
}

string GetLocalVariableString(LocalVariable localVariable)
{
    return GetTypeString(localVariable.Type) + " " + localVariable.Name + " = " + GetExpressionString(localVariable.InitValue);
}

string GetAssignmentString(Assignment assignment)
{
    return GetExpressionString(assignment.LValue) + " = " + GetExpressionString(assignment.RValue);
}

string GetArgumentString(Argument argument)
{
    return GetExpressionString(argument.Expression);
}

string GetExpressionString(Expression expression)
{
    if (expression is BinaryExpression)
    {
        var binaryExpression = (BinaryExpression)expression;
        return string.Format("({0} {1} {2})", GetExpressionString(binaryExpression.Term1), GetOperatorString(binaryExpression.Op), GetExpressionString(binaryExpression.Term2));
    }
    else if (expression is UnaryExpression)
    {
        var unaryExpression = (UnaryExpression)expression;
        return string.Format("({0}{1})", GetOperatorString(unaryExpression.Op), GetExpressionString(unaryExpression.Term));
    }
    else if (expression is ConditionalTernaryExpression)
    {
        var conditionalTernaryExpression = (ConditionalTernaryExpression)expression;
        return string.Format("({0} ? {1} : {2})", GetExpressionString(conditionalTernaryExpression.Cond), GetExpressionString(conditionalTernaryExpression.Term1), GetExpressionString(conditionalTernaryExpression.Term2));
    }
    else if (expression is ConditionalTernaryExpression)
    {
        var conditionalTernaryExpression = (ConditionalTernaryExpression)expression;
        return string.Format("({0} ? {1} : {2})", GetExpressionString(conditionalTernaryExpression.Cond), GetExpressionString(conditionalTernaryExpression.Term1), GetExpressionString(conditionalTernaryExpression.Term2));
    }
    else if (expression is NumberLiteral)
    {
        var numberLiteral = (NumberLiteral)expression;
        return ToStringHelper.ToStringWithCulture(numberLiteral.Value);
    }
    else if (expression is StringLiteral)
    {
        var stringLiteral = (StringLiteral)expression;
        return "\"" + stringLiteral.Value + "\"";
    }
    else if (expression is BoolLiteral)
    {
        var boolLiteral = (BoolLiteral)expression;
        return boolLiteral.Value ? "true" : "false";
    }
    else if (expression is FunctionCall)
    {
        var functionCall = (FunctionCall)expression;
        return string.Format("{0}({1})", functionCall.FunctionReference.NameRef, string.Join(", ", functionCall.Arguments.Select(argument => GetArgumentString(argument))));
    }
    else if (expression is VariableReference)
    {
        var variableReference = (VariableReference)expression;
        return variableReference.Target.NameRef.Value;
    }
    else
        throw new ArgumentException("Unknown expression: " + expression, "expression");
}

string GetTypeString(MiniPL.DomainDefinitions.Type type)
{
    switch (type)
    {
        case MiniPL.DomainDefinitions.Type.Integer:   return "int";
        case MiniPL.DomainDefinitions.Type.Real:      return "double";
        case MiniPL.DomainDefinitions.Type.String:    return "string";
        case MiniPL.DomainDefinitions.Type.Char:      return "char";
        case MiniPL.DomainDefinitions.Type.Bool:      return "bool";
        default:                                throw new ArgumentException("Unknown type: " + type, "type");
    }
}

string GetOperatorString(BinaryOperator binaryOperator)
{
    switch (binaryOperator)
    {
        case BinaryOperator.Add:    return "+";
        case BinaryOperator.Sub:    return "-";
        case BinaryOperator.Mul:    return "*";
        case BinaryOperator.Div:    return "/";
        case BinaryOperator.Pow:    return "^";
        case BinaryOperator.Mod:    return "%";
        case BinaryOperator.Eq:     return "==";
        case BinaryOperator.Neq:    return "!=";
        case BinaryOperator.Lt:     return "<";
        case BinaryOperator.Lte:    return "<=";
        case BinaryOperator.Gt:     return ">";
        case BinaryOperator.Gte:    return ">=";
        case BinaryOperator.And:    return "&&";
        case BinaryOperator.Or:     return "||";
        default:                    throw new ArgumentException("Unknown binaryOperator: " + binaryOperator, "binaryOperator");
    }
}

string GetOperatorString(UnaryOperator unaryOperator)
{
    switch (unaryOperator)
    {
        case UnaryOperator.Pos:     return "+";
        case UnaryOperator.Neg:     return "-";
        case UnaryOperator.Not:     return "!";
        default:                    throw new ArgumentException("Unknown unaryOperator: " + unaryOperator, "unaryOperator");
    }
}

const string indent = "    ";

        
        #line default
        #line hidden
    }
    
    #line default
    #line hidden
    #region Base class
    /// <summary>
    /// Base class for this transformation
    /// </summary>
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("Microsoft.VisualStudio.TextTemplating", "11.0.0.0")]
    public class CSharpGeneratorTemplateBase
    {
        #region Fields
        private global::System.Text.StringBuilder generationEnvironmentField;
        private global::System.CodeDom.Compiler.CompilerErrorCollection errorsField;
        private global::System.Collections.Generic.List<int> indentLengthsField;
        private string currentIndentField = "";
        private bool endsWithNewline;
        private global::System.Collections.Generic.IDictionary<string, object> sessionField;
        #endregion
        #region Properties
        /// <summary>
        /// The string builder that generation-time code is using to assemble generated output
        /// </summary>
        protected System.Text.StringBuilder GenerationEnvironment
        {
            get
            {
                if ((this.generationEnvironmentField == null))
                {
                    this.generationEnvironmentField = new global::System.Text.StringBuilder();
                }
                return this.generationEnvironmentField;
            }
            set
            {
                this.generationEnvironmentField = value;
            }
        }
        /// <summary>
        /// The error collection for the generation process
        /// </summary>
        public System.CodeDom.Compiler.CompilerErrorCollection Errors
        {
            get
            {
                if ((this.errorsField == null))
                {
                    this.errorsField = new global::System.CodeDom.Compiler.CompilerErrorCollection();
                }
                return this.errorsField;
            }
        }
        /// <summary>
        /// A list of the lengths of each indent that was added with PushIndent
        /// </summary>
        private System.Collections.Generic.List<int> indentLengths
        {
            get
            {
                if ((this.indentLengthsField == null))
                {
                    this.indentLengthsField = new global::System.Collections.Generic.List<int>();
                }
                return this.indentLengthsField;
            }
        }
        /// <summary>
        /// Gets the current indent we use when adding lines to the output
        /// </summary>
        public string CurrentIndent
        {
            get
            {
                return this.currentIndentField;
            }
        }
        /// <summary>
        /// Current transformation session
        /// </summary>
        public virtual global::System.Collections.Generic.IDictionary<string, object> Session
        {
            get
            {
                return this.sessionField;
            }
            set
            {
                this.sessionField = value;
            }
        }
        #endregion
        #region Transform-time helpers
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void Write(string textToAppend)
        {
            if (string.IsNullOrEmpty(textToAppend))
            {
                return;
            }
            // If we're starting off, or if the previous text ended with a newline,
            // we have to append the current indent first.
            if (((this.GenerationEnvironment.Length == 0) 
                        || this.endsWithNewline))
            {
                this.GenerationEnvironment.Append(this.currentIndentField);
                this.endsWithNewline = false;
            }
            // Check if the current text ends with a newline
            if (textToAppend.EndsWith(global::System.Environment.NewLine, global::System.StringComparison.CurrentCulture))
            {
                this.endsWithNewline = true;
            }
            // This is an optimization. If the current indent is "", then we don't have to do any
            // of the more complex stuff further down.
            if ((this.currentIndentField.Length == 0))
            {
                this.GenerationEnvironment.Append(textToAppend);
                return;
            }
            // Everywhere there is a newline in the text, add an indent after it
            textToAppend = textToAppend.Replace(global::System.Environment.NewLine, (global::System.Environment.NewLine + this.currentIndentField));
            // If the text ends with a newline, then we should strip off the indent added at the very end
            // because the appropriate indent will be added when the next time Write() is called
            if (this.endsWithNewline)
            {
                this.GenerationEnvironment.Append(textToAppend, 0, (textToAppend.Length - this.currentIndentField.Length));
            }
            else
            {
                this.GenerationEnvironment.Append(textToAppend);
            }
        }
        /// <summary>
        /// Write text directly into the generated output
        /// </summary>
        public void WriteLine(string textToAppend)
        {
            this.Write(textToAppend);
            this.GenerationEnvironment.AppendLine();
            this.endsWithNewline = true;
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void Write(string format, params object[] args)
        {
            this.Write(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Write formatted text directly into the generated output
        /// </summary>
        public void WriteLine(string format, params object[] args)
        {
            this.WriteLine(string.Format(global::System.Globalization.CultureInfo.CurrentCulture, format, args));
        }
        /// <summary>
        /// Raise an error
        /// </summary>
        public void Error(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Raise a warning
        /// </summary>
        public void Warning(string message)
        {
            System.CodeDom.Compiler.CompilerError error = new global::System.CodeDom.Compiler.CompilerError();
            error.ErrorText = message;
            error.IsWarning = true;
            this.Errors.Add(error);
        }
        /// <summary>
        /// Increase the indent
        /// </summary>
        public void PushIndent(string indent)
        {
            if ((indent == null))
            {
                throw new global::System.ArgumentNullException("indent");
            }
            this.currentIndentField = (this.currentIndentField + indent);
            this.indentLengths.Add(indent.Length);
        }
        /// <summary>
        /// Remove the last indent that was added with PushIndent
        /// </summary>
        public string PopIndent()
        {
            string returnValue = "";
            if ((this.indentLengths.Count > 0))
            {
                int indentLength = this.indentLengths[(this.indentLengths.Count - 1)];
                this.indentLengths.RemoveAt((this.indentLengths.Count - 1));
                if ((indentLength > 0))
                {
                    returnValue = this.currentIndentField.Substring((this.currentIndentField.Length - indentLength));
                    this.currentIndentField = this.currentIndentField.Remove((this.currentIndentField.Length - indentLength));
                }
            }
            return returnValue;
        }
        /// <summary>
        /// Remove any indentation
        /// </summary>
        public void ClearIndent()
        {
            this.indentLengths.Clear();
            this.currentIndentField = "";
        }
        #endregion
        #region ToString Helpers
        /// <summary>
        /// Utility class to produce culture-oriented representation of an object as a string.
        /// </summary>
        public class ToStringInstanceHelper
        {
            private System.IFormatProvider formatProviderField  = global::System.Globalization.CultureInfo.InvariantCulture;
            /// <summary>
            /// Gets or sets format provider to be used by ToStringWithCulture method.
            /// </summary>
            public System.IFormatProvider FormatProvider
            {
                get
                {
                    return this.formatProviderField ;
                }
                set
                {
                    if ((value != null))
                    {
                        this.formatProviderField  = value;
                    }
                }
            }
            /// <summary>
            /// This is called from the compile/run appdomain to convert objects within an expression block to a string
            /// </summary>
            public string ToStringWithCulture(object objectToConvert)
            {
                if ((objectToConvert == null))
                {
                    throw new global::System.ArgumentNullException("objectToConvert");
                }
                System.Type t = objectToConvert.GetType();
                System.Reflection.MethodInfo method = t.GetMethod("ToString", new System.Type[] {
                            typeof(System.IFormatProvider)});
                if ((method == null))
                {
                    return objectToConvert.ToString();
                }
                else
                {
                    return ((string)(method.Invoke(objectToConvert, new object[] {
                                this.formatProviderField })));
                }
            }
        }
        private ToStringInstanceHelper toStringHelperField = new ToStringInstanceHelper();
        /// <summary>
        /// Helper to produce culture-oriented representation of an object as a string
        /// </summary>
        public ToStringInstanceHelper ToStringHelper
        {
            get
            {
                return this.toStringHelperField;
            }
        }
        #endregion
    }
    #endregion
}
