<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>net48;net6.0</TargetFrameworks>
    <RootNamespace>Sarcasm</RootNamespace>
    <AssemblyName>Sarcasm</AssemblyName>
    <Description>SDK for creating typesafe and typeless domain bound grammar and using the general unparser</Description>
    <Version>4.0.0</Version>
    <Authors>Dávid Németi</Authors>
    <GeneratePackageOnBuild>true</GeneratePackageOnBuild>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <DebugType>full</DebugType>
    <DebugSymbols>true</DebugSymbols>
    <NoWarn>CS1591,CS0618</NoWarn>
    <SignAssembly>true</SignAssembly>
    <AssemblyOriginatorKeyFile>Signature\Sarcasm.snk</AssemblyOriginatorKeyFile>
    <!--<TransformOnBuild>true</TransformOnBuild>
    <TransformOutOfDateOnly>true</TransformOutOfDateOnly>
    <VSToolsPath Condition="'$(VSToolsPath)' == ''">$(MSBuildExtensionsPath32)\Microsoft\VisualStudio\v$(VisualStudioVersion)</VSToolsPath>-->
  </PropertyGroup>

  <ItemGroup>
    <Publicize Include="Irony" IncludeVirtualMembers="false" />
  </ItemGroup>

  <ItemGroup>
    <!--
      using Krafs.Publicizer instead of IgnoresAccessChecksToGenerator, because:
        - IgnoresAccessChecksToGenerator raised error when processing netstandard2.0 Irony.dll
        - IgnoresAccessChecksToGenerator cannot publicize private members
    -->
    <PackageReference Include="Krafs.Publicizer" Version="2.2.1">
      <PrivateAssets>all</PrivateAssets>
      <IncludeAssets>runtime; build; native; contentfiles; analyzers; buildtransitive</IncludeAssets>
    </PackageReference>
  </ItemGroup>

  <ItemGroup Condition=" '$(TargetFramework)' == 'net48' ">
    <Reference Include="Microsoft.CSharp" />
  </ItemGroup>

  <ItemGroup>
    <Reference Include="Irony">
      <HintPath>..\Libraries\Irony.dll</HintPath>
    </Reference>
  </ItemGroup>

  <ItemGroup>
    <Compile Update="GrammarAst\BnfiExpressions\BnfiExpression.generated.cs">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>BnfiExpression.tt</DependentUpon>
    </Compile>
    <Compile Update="GrammarAst\BnfiTerms\BnfiTermConversionForDataAndNumber.generated.cs">
      <AutoGen>True</AutoGen>
      <DesignTime>True</DesignTime>
      <DependentUpon>BnfiTermConversionForDataAndNumber.tt</DependentUpon>
    </Compile>
  </ItemGroup>

  <ItemGroup>
    <None Update="GrammarAst\BnfiExpressions\BnfiExpression.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>BnfiExpression.generated.cs</LastGenOutput>
    </None>
    <None Update="GrammarAst\BnfiTerms\BnfiTermConversionForDataAndNumber.tt">
      <Generator>TextTemplatingFileGenerator</Generator>
      <LastGenOutput>BnfiTermConversionForDataAndNumber.generated.cs</LastGenOutput>
    </None>
  </ItemGroup>

  <ItemGroup>
    <Content Update="Readme.txt" />
  </ItemGroup>

  <ItemGroup>
    <Service Include="{508349B6-6B84-4DF5-91F0-309BEEBAD82D}" />
  </ItemGroup>

  <!--<Import Project="$(VSToolsPath)\TextTemplating\Microsoft.TextTemplating.targets" Condition="'$(VSToolsPath)' != ''" />-->

</Project>
