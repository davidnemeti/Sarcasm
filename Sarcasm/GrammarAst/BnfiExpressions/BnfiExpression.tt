#region License
/*
    This file is part of Sarcasm.

    Copyright 2012-2013 Dávid Németi

    Sarcasm is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Sarcasm is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with Sarcasm.  If not, see <http://www.gnu.org/licenses/>.
*/
#endregion

<#@ template debug="true" hostSpecific="false" #>
<#@ output extension="generated.cs" #>
<#@ assembly Name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ include file="BnfiExpressionGeneration.ttinclude" #> 
<#
    WriteLine("// GENERATED FILE");
#>

using Irony.Parsing;

namespace Sarcasm.GrammarAst
{
<#
    var bnfTermCoreTypeNamesForBnfiExpressionNoAst =
    GenerateBnfExpressionClassAndOperators(
        "BnfiExpressionNoAst",
        inheritFromBase: "BnfiExpression",
        implementInterfaces: new[]{"IBnfiExpressionTL"},
        bnfTermCoreTypeNames: new[]{"BnfiTermNoAst", "BnfiTermKeyTerm"},
        bnfTermCoreExternTypeNames: new[]{"GrammarHint"},
        multiCore: true
    );

    GenerateBnfExpressionClassAndOperators(
        "BnfiExpressionRecordTL",
        inheritFromBase: "BnfiExpression",
        implementInterfaces: new[]{"IBnfiExpressionTL"},
        bnfTermCoreTypeNames: new[]{"Member", "BnfiTermCopy"},
        bnfTermSideTypeNames: bnfTermCoreTypeNamesForBnfiExpressionNoAst,
        multiCore: true
    );

    GenerateBnfExpressionClassAndOperators(
        "BnfiExpressionRecord<TD>",
        inheritFromBase: "BnfiExpression",
        implementInterfaces: new[]{"IBnfiExpression<TD>", "IBnfiTermPlusAbleForType<TD>"},
        bnfTermCoreTypeNames: new[]{"Member<TDDeclaringType>", "BnfiTermCopy<TD>"},
        bnfTermSideTypeNames: bnfTermCoreTypeNamesForBnfiExpressionNoAst,
        multiCore: true
    );

    var bnfTermCoreTypeNamesForBnfiExpressionConversion =
    GenerateBnfExpressionClassAndOperators(
        "BnfiExpressionConversionTL",
        inheritFromBase: "BnfiExpressionConversion",
        implementInterfaces: new[]{"IBnfiExpressionTL"},
        bnfTermCoreTypeNames: new[]{"BnfiTermConversion"},
        bnfTermSideTypeNames: bnfTermCoreTypeNamesForBnfiExpressionNoAst,
        multiCore: false
    );

    var bnfTermCoreTypeNamesForBnfiExpressionConversionGeneric =
    GenerateBnfExpressionClassAndOperators(
        "BnfiExpressionConversion<TD>",
        inheritFromBase: "BnfiExpressionConversion",
        implementInterfaces: new[]{"IBnfiExpression<TD>", "IBnfiTermOrAbleForChoice<TD>"},
        bnfTermCoreTypeNames: new[]{"BnfiTermConversion<TD>"},
        bnfTermSideTypeNames: bnfTermCoreTypeNamesForBnfiExpressionNoAst,
        multiCore: false
    );

    // multiCore is false for BnfiExpressionChoice to achieve that only one non-(BnfiTermKeyTerm or GrammarHint) term would appear in a "Plus" expression

    GenerateBnfExpressionClassAndOperators(
        "BnfiExpressionChoiceTL",
        inheritFromBase: "BnfiExpression",
        implementInterfaces: new[]{"IBnfiExpressionTL"},
        bnfTermCoreTypeNames: new[]{"BnfiTermRecord", "BnfiTermConstant", "BnfiTermChoice", "BnfiTermCollection"},
        bnfTermCoreExternTypeNames: bnfTermCoreTypeNamesForBnfiExpressionConversion.Concat(new[]{"BnfiExpressionConversion"}),
        bnfTermSideTypeNames: bnfTermCoreTypeNamesForBnfiExpressionNoAst.Except(new[]{"BnfiExpressionNoAst"}),
        multiCore: false
    );

    GenerateBnfExpressionClassAndOperators(
        "BnfiExpressionChoice<TD>",
        inheritFromBase: "BnfiExpression",
        implementInterfaces: new[]{"IBnfiExpression<TD>", "IBnfiTermOrAbleForChoice<TD>"},
        bnfTermCoreTypeNames: new[]{"BnfiTermRecord<TD>", "BnfiTermConstant<TD>", "BnfiTermChoice<TD>", "BnfiTermCollectionWithCollectionType<TDCollectionType>"},
        bnfTermCoreExternTypeNames: bnfTermCoreTypeNamesForBnfiExpressionConversionGeneric,
        bnfTermSideTypeNames: bnfTermCoreTypeNamesForBnfiExpressionNoAst.Except(new[]{"BnfiExpressionNoAst"}),
        multiCore: false
    );

    GenerateBnfExpressionClassAndOperators(
        "BnfiExpressionGeneral<TD>",
        inheritFromBase: "BnfiExpression",
        implementInterfaces: new[]{"IBnfiExpression<TD>"},
        bnfTermCoreTypeNames: new[]{"BnfiTermRecord<TD>", "BnfiTermConstant<TD>", "BnfiTermChoice<TD>", "BnfiTermCollectionWithCollectionType<TDCollectionType>"},
        bnfTermSideTypeNames: bnfTermCoreTypeNamesForBnfiExpressionNoAst.Except(new[]{"GrammarHint", "BnfiTermNoAst", "BnfiTermKeyTerm"}),
        multiCore: false,
        pipeable: false
    );
#>
}
