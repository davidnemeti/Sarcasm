<#@ template debug="true" hostSpecific="false" #>
<#@ output extension="generated.cs" #>
<#@ assembly Name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ include file="BnfiExpressionGeneration.ttinclude" #> 
<#
	WriteLine("// GENERATED FILE");
#>

using System;
using System.Collections.Generic;
using System.Linq;

using Irony;
using Irony.Ast;
using Irony.Parsing;

namespace Sarcasm.GrammarAst
{
<#
	var bnfTermCoreTypeNamesForBnfiExpressionTerminals =
	GenerateBnfExpressionClassAndOperators(
		"BnfiExpressionTerminals",
		inheritFromBase: "BnfiExpression",
		implementInterfaces: new[]{"IBnfiExpressionTL"},
		bnfTermCoreTypeNames: new[]{"BnfiTermNoAst", "BnfiTermKeyTerm", "BnfiTermKeyTermPunctuation"},
		bnfTermCoreExternTypeNames: new[]{"GrammarHint"},
		multiCore: true
	);

	GenerateBnfExpressionClassAndOperators(
		"BnfiExpressionRecordTL",
		inheritFromBase: "BnfiExpression",
		implementInterfaces: new[]{"IBnfiExpressionTL"},
		bnfTermCoreTypeNames: new[]{"Member", "BnfiTermCopy"},
		bnfTermSideTypeNames: bnfTermCoreTypeNamesForBnfiExpressionTerminals,
		multiCore: true
	);

	GenerateBnfExpressionClassAndOperators(
		"BnfiExpressionRecord<T>",
		inheritFromBase: "BnfiExpression",
		implementInterfaces: new[]{"IBnfiExpression<T>", "IBnfiTermPlusAbleForType<T>"},
		bnfTermCoreTypeNames: new[]{"Member<TDeclaringType>", "BnfiTermCopy<T>"},
		bnfTermSideTypeNames: bnfTermCoreTypeNamesForBnfiExpressionTerminals,
		multiCore: true
	);

	var bnfTermCoreTypeNamesForBnfiExpressionConversion =
	GenerateBnfExpressionClassAndOperators(
		"BnfiExpressionConversionTL",
		inheritFromBase: "BnfiExpressionConversion",
		implementInterfaces: new[]{"IBnfiExpressionTL"},
		bnfTermCoreTypeNames: new[]{"BnfiTermConversion"},
		bnfTermSideTypeNames: bnfTermCoreTypeNamesForBnfiExpressionTerminals,
		multiCore: false
	);

	var bnfTermCoreTypeNamesForBnfiExpressionConversionGeneric =
	GenerateBnfExpressionClassAndOperators(
		"BnfiExpressionConversion<T>",
		inheritFromBase: "BnfiExpressionConversion",
		implementInterfaces: new[]{"IBnfiExpression<T>", "IBnfiTermOrAbleForChoice<T>"},
		bnfTermCoreTypeNames: new[]{"BnfiTermConversion<T>"},
		bnfTermSideTypeNames: bnfTermCoreTypeNamesForBnfiExpressionTerminals,
		multiCore: false
	);

	// multiCore is false for BnfiExpressionChoice to achieve that only one non-(BnfiTermKeyTermPunctuation or GrammarHint) term would appear in a "Plus" expression

	GenerateBnfExpressionClassAndOperators(
		"BnfiExpressionChoiceTL",
		inheritFromBase: "BnfiExpression",
		implementInterfaces: new[]{"IBnfiExpressionTL"},
		bnfTermCoreTypeNames: new[]{"BnfiTermRecord", "BnfiTermConstant", "BnfiTermChoice", "BnfiTermCollection"},
		bnfTermCoreExternTypeNames: bnfTermCoreTypeNamesForBnfiExpressionConversion.Concat(new[]{"BnfiExpressionConversion"}),
		bnfTermSideTypeNames: bnfTermCoreTypeNamesForBnfiExpressionTerminals.Except(new[]{"BnfiExpressionTerminals"}),
		multiCore: false
	);

	GenerateBnfExpressionClassAndOperators(
		"BnfiExpressionChoice<T>",
		inheritFromBase: "BnfiExpression",
		implementInterfaces: new[]{"IBnfiExpression<T>", "IBnfiTermOrAbleForChoice<T>"},
		bnfTermCoreTypeNames: new[]{"BnfiTermRecord<TType>", "BnfiTermConstant<T>", "BnfiTermChoice<TType>", "BnfiTermCollectionWithCollectionType<TCollectionType>"},
		bnfTermCoreExternTypeNames: bnfTermCoreTypeNamesForBnfiExpressionConversionGeneric,
		bnfTermSideTypeNames: bnfTermCoreTypeNamesForBnfiExpressionTerminals.Except(new[]{"BnfiExpressionTerminals"}),
		multiCore: false
	);

	GenerateBnfExpressionClassAndOperators(
		"BnfiExpressionGeneral<T>",
		inheritFromBase: "BnfiExpression",
		implementInterfaces: new[]{"IBnfiExpression<T>"},
		bnfTermCoreTypeNames: new[]{"BnfiTermRecord<TType>", "BnfiTermConstant<T>", "BnfiTermChoice<TType>", "BnfiTermCollectionWithCollectionType<TCollectionType>"},
		bnfTermSideTypeNames: bnfTermCoreTypeNamesForBnfiExpressionTerminals.Except(new[]{"GrammarHint", "BnfiTermNoAst", "BnfiTermKeyTerm", "BnfiTermKeyTermPunctuation"}),
		multiCore: false,
		pipeable: false
	);
#>
}
