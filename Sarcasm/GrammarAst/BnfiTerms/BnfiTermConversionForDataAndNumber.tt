#region License
/*
    This file is part of Sarcasm.

    Copyright 2012-2013 Dávid Németi

    Sarcasm is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Sarcasm is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with Sarcasm.  If not, see <http://www.gnu.org/licenses/>.
*/
#endregion

<#@ template debug="true" hostSpecific="false" #>
<#@ output extension="generated.cs" #>
<#@ assembly Name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #> 
<#
    WriteLine("// GENERATED FILE");
#>

using System;

using Irony.Parsing;

namespace Sarcasm.GrammarAst
{
<#
    foreach (TypeCode typeCode in Enum.GetValues(typeof(TypeCode)))
    {
        if (typeCode == TypeCode.Empty)
            continue;

        Type type = TypeCodeToType(typeCode);
        string methodNameExt = typeCode == TypeCode.Object ? string.Empty : typeCode.ToString();
        string introMethodNameExt = typeCode == TypeCode.Object ? string.Empty : string.Format("<{0}>", typeCode);
        string typeParamsStr = typeCode == TypeCode.Object ? "TL" : string.Format("<{0}>", typeCode);
#>
    #region Intro <#= type.Name #> (<#= IsNumeric(typeCode) ? "Data and Number" : "Data" #>)

    #region BnfiTermConversion

    public partial class BnfiTermConversion
    {
        public static BnfiTermConversion<#= typeParamsStr #> IntroDataLiteral<#= methodNameExt #>(DataLiteralBase dataLiteral)
        {
<#
        if (typeCode != TypeCode.Object)
        {
#>
            if (dataLiteral.DataType != TypeCode.<#= typeCode #>)
                GrammarHelper.ThrowGrammarErrorException(GrammarErrorLevel.Error, "terminal '{0}' should be a <#= type.Name #>", dataLiteral.Name);

<#
        }
#>
            return Intro<#= introMethodNameExt #>(dataLiteral, (context, parseNode) => { return (<#= type.Name #>)parseNode.FindToken().Value; }, IdentityFunctionForceCast<<#= type.Name #>, object>, astForChild: false).MarkLiteral();
        }
<#
        if (IsNumeric(typeCode))
        {
#>

        public static BnfiTermConversion<#= typeParamsStr #> IntroNumberLiteral<#= methodNameExt #>(NumberLiteral numberLiteral)
        {
            return Intro<#= introMethodNameExt #>(numberLiteral, (context, parseNode) => { return (<#= type.Name #>)parseNode.FindToken().Value; }, IdentityFunctionForceCast<<#= type.Name #>, object>, astForChild: false).MarkLiteral();
        }
<#
        }
#>
    }

    #endregion

    #region GrammarHelper

    public static partial class GrammarHelper
    {
        public static BnfiTermConversion<#= typeParamsStr #> IntroDataLiteral<#= methodNameExt #>(this DataLiteralBase dataLiteral)
        {
            return BnfiTermConversion.IntroDataLiteral<#= methodNameExt #>(dataLiteral);
        }
<#
        if (IsNumeric(typeCode))
        {
#>

        public static BnfiTermConversion<#= typeParamsStr #> IntroNumberLiteral<#= methodNameExt #>(this NumberLiteral numberLiteral)
        {
            return BnfiTermConversion.IntroNumberLiteral<#= methodNameExt #>(numberLiteral);
        }
<#
        }
#>
    }

    #endregion

    #region TerminalFactoryS

    public partial class TerminalFactoryS
    {
        #region Data

        public static BnfiTermConversion<#= typeParamsStr #> CreateDataLiteral<#= methodNameExt #>(string name = "dataliteral<#= methodNameExt #>", string dateTimeFormat = defaultDateTimeFormat, int intRadix = defaultIntRadix)
        {
            return new DataLiteralBase(name: name, dataType: TypeCode.<#= typeCode #>).IntroDataLiteral<#= methodNameExt #>();
        }

        public static BnfiTermConversion<#= typeParamsStr #> CreateDataLiteral<#= methodNameExt #>Dsv(string name, string dateTimeFormat = defaultDateTimeFormat, int intRadix = defaultIntRadix)
        {
            return new DsvLiteral(name: name, dataType: TypeCode.<#= typeCode #>).IntroDataLiteral<#= methodNameExt #>();
        }

        public static BnfiTermConversion<#= typeParamsStr #> CreateDataLiteral<#= methodNameExt #>Dsv(string name, string terminator, string dateTimeFormat = defaultDateTimeFormat, int intRadix = defaultIntRadix)
        {
            return new DsvLiteral(name: name, dataType: TypeCode.<#= typeCode #>, terminator: terminator).IntroDataLiteral<#= methodNameExt #>();
        }

        public static BnfiTermConversion<#= typeParamsStr #> CreateDataLiteral<#= methodNameExt #>Quoted(string name, string startEndSymbol, string dateTimeFormat = defaultDateTimeFormat, int intRadix = defaultIntRadix)
        {
            return new QuotedValueLiteral(name: name, dataType: TypeCode.<#= typeCode #>, startEndSymbol: startEndSymbol).IntroDataLiteral<#= methodNameExt #>();
        }

        public static BnfiTermConversion<#= typeParamsStr #> CreateDataLiteral<#= methodNameExt #>Quoted(string name, string startSymbol, string endSymbol, string dateTimeFormat = defaultDateTimeFormat, int intRadix = defaultIntRadix)
        {
            return new QuotedValueLiteral(name: name, dataType: TypeCode.<#= typeCode #>, startSymbol: startSymbol, endSymbol: endSymbol).IntroDataLiteral<#= methodNameExt #>();
        }

        public static BnfiTermConversion<#= typeParamsStr #> CreateDataLiteral<#= methodNameExt #>FixedLength(string name, int length, string dateTimeFormat = defaultDateTimeFormat, int intRadix = defaultIntRadix)
        {
            return new FixedLengthLiteral(name: name, dataType: TypeCode.<#= typeCode #>, length: length).IntroDataLiteral<#= methodNameExt #>();
        }

        #endregion
<#
        if (IsNumeric(typeCode))
        {
#>

        #region Number

        public static BnfiTermConversion<#= typeParamsStr #> CreateNumberLiteral<#= methodNameExt #>(string name = "numberliteral")
        {
            return new NumberLiteral(name: name).IntroNumberLiteral<#= methodNameExt #>();
        }

        public static BnfiTermConversion<#= typeParamsStr #> CreateNumberLiteral<#= methodNameExt #>(NumberOptions options)
        {
            return new NumberLiteral(name: "numberliteral", options: options).IntroNumberLiteral<#= methodNameExt #>();
        }

        public static BnfiTermConversion<#= typeParamsStr #> CreateNumberLiteral<#= methodNameExt #>(string name, NumberOptions options)
        {
            return new NumberLiteral(name: name, options: options).IntroNumberLiteral<#= methodNameExt #>();
        }

        #endregion
<#
        }
#>
    }

    #endregion

    #endregion

<#
    }
#>
}

<#+
Type TypeCodeToType(TypeCode typeCode)
{
    return Type.GetType("System." + typeCode.ToString());
}

bool IsNumeric(TypeCode typeCode)
{
    switch (typeCode)
    {
        case TypeCode.Byte:
        case TypeCode.Decimal:
        case TypeCode.Double:
        case TypeCode.Int16:
        case TypeCode.Int32:
        case TypeCode.Int64:
        case TypeCode.SByte:
        case TypeCode.Single:
        case TypeCode.UInt16:
        case TypeCode.UInt32:
        case TypeCode.UInt64:
        case TypeCode.Object:
            return true;

        default:
            return false;
    }
}
#>