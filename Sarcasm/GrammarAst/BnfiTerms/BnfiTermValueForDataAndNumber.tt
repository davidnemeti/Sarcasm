<#@ template debug="true" hostSpecific="false" #>
<#@ output extension="generated.cs" #>
<#@ assembly Name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #> 
<#
	WriteLine("// GENERATED FILE");
#>

using System;
using System.Collections.Generic;
using System.Linq;

using Irony;
using Irony.Ast;
using Irony.Parsing;

namespace Sarcasm.GrammarAst
{
<#
	foreach (TypeCode typeCode in Enum.GetValues(typeof(TypeCode)))
    {
		if (typeCode == TypeCode.Empty)
			continue;

		Type type = TypeCodeToType(typeCode);
		string methodNameExt = typeCode == TypeCode.Object ? string.Empty : typeCode.ToString();
		string parseMethodNameExt = typeCode == TypeCode.Object ? string.Empty : string.Format("<{0}>", typeCode);
		string typeParamsStr = typeCode == TypeCode.Object ? "TL" : string.Format("<{0}>", typeCode);
#>
	#region Parse <#= type.Name #> (<#= IsNumeric(typeCode) ? "Data and Number" : "Data" #>)

	#region BnfiTermValue

    public partial class BnfiTermValue
	{
        public static BnfiTermValue<#= typeParamsStr #> ParseDataLiteral<#= methodNameExt #>(DataLiteralBase dataLiteral)
        {
<#
		if (typeCode != TypeCode.Object)
        {
#>
            if (dataLiteral.DataType != TypeCode.<#= typeCode #>)
                GrammarHelper.ThrowGrammarErrorException(GrammarErrorLevel.Error, "terminal '{0}' should be a <#= type.Name #>", dataLiteral.Name);

<#
        }
#>
            return Parse<#= parseMethodNameExt #>(dataLiteral, (context, parseNode) => { return (<#= type.Name #>)parseNode.FindToken().Value; }, IdentityFunctionForceCast<<#= type.Name #>, object>, astForChild: false);
        }
<#
		if (IsNumeric(typeCode))
        {
#>

		public static BnfiTermValue<#= typeParamsStr #> ParseNumberLiteral<#= methodNameExt #>(NumberLiteral numberLiteral)
        {
            return Parse<#= parseMethodNameExt #>(numberLiteral, (context, parseNode) => { return (<#= type.Name #>)parseNode.FindToken().Value; }, IdentityFunctionForceCast<<#= type.Name #>, object>, astForChild: false);
        }
<#
        }
#>
	}

	#endregion

	#region GrammarHelper

    public static partial class GrammarHelper
	{
        public static BnfiTermValue<#= typeParamsStr #> ParseDataLiteral<#= methodNameExt #>(this DataLiteralBase dataLiteral)
        {
			return BnfiTermValue.ParseDataLiteral<#= methodNameExt #>(dataLiteral);
        }
<#
		if (IsNumeric(typeCode))
        {
#>

		public static BnfiTermValue<#= typeParamsStr #> ParseNumberLiteral<#= methodNameExt #>(this NumberLiteral numberLiteral)
        {
			return BnfiTermValue.ParseNumberLiteral<#= methodNameExt #>(numberLiteral);
        }
<#
        }
#>
	}

	#endregion

	#region Grammar

    public partial class Grammar
	{
		#region Data

        public static BnfiTermValue<#= typeParamsStr #> ParseDataLiteral<#= methodNameExt #>(string name = "dataliteral<#= methodNameExt #>")
		{
			return new DataLiteralBase(name: name, dataType: TypeCode.<#= typeCode #>).ParseDataLiteral<#= methodNameExt #>();
		}

        public static BnfiTermValue<#= typeParamsStr #> ParseDataLiteral<#= methodNameExt #>Dsv(string name)
		{
			return new DsvLiteral(name: name, dataType: TypeCode.<#= typeCode #>).ParseDataLiteral<#= methodNameExt #>();
		}

        public static BnfiTermValue<#= typeParamsStr #> ParseDataLiteral<#= methodNameExt #>Dsv(string name, string terminator)
		{
			return new DsvLiteral(name: name, dataType: TypeCode.<#= typeCode #>, terminator: terminator).ParseDataLiteral<#= methodNameExt #>();
		}

        public static BnfiTermValue<#= typeParamsStr #> ParseDataLiteral<#= methodNameExt #>Quoted(string name, string startEndSymbol)
		{
			return new QuotedValueLiteral(name: name, dataType: TypeCode.<#= typeCode #>, startEndSymbol: startEndSymbol).ParseDataLiteral<#= methodNameExt #>();
		}

        public static BnfiTermValue<#= typeParamsStr #> ParseDataLiteral<#= methodNameExt #>Quoted(string name, string startSymbol, string endSymbol)
		{
			return new QuotedValueLiteral(name: name, dataType: TypeCode.<#= typeCode #>, startSymbol: startSymbol, endSymbol: endSymbol).ParseDataLiteral<#= methodNameExt #>();
		}

        public static BnfiTermValue<#= typeParamsStr #> ParseDataLiteral<#= methodNameExt #>FixedLength(string name, int length)
		{
			return new FixedLengthLiteral(name: name, dataType: TypeCode.<#= typeCode #>, length: length).ParseDataLiteral<#= methodNameExt #>();
		}

		#endregion
<#
		if (IsNumeric(typeCode))
        {
#>

		#region Number

		public static BnfiTermValue<#= typeParamsStr #> CreateNumberLiteral<#= methodNameExt #>(string name = "numberliteral")
        {
			return new NumberLiteral(name: name).ParseNumberLiteral<#= methodNameExt #>();
        }

		public static BnfiTermValue<#= typeParamsStr #> CreateNumberLiteral<#= methodNameExt #>(NumberOptions options)
        {
			return new NumberLiteral(name: "numberliteral", options: options).ParseNumberLiteral<#= methodNameExt #>();
        }

		public static BnfiTermValue<#= typeParamsStr #> CreateNumberLiteral<#= methodNameExt #>(string name, NumberOptions options)
        {
			return new NumberLiteral(name: name, options: options).ParseNumberLiteral<#= methodNameExt #>();
        }

		#endregion
<#
        }
#>
	}

	#endregion

	#endregion

<#
    }
#>
}

<#+
Type TypeCodeToType(TypeCode typeCode)
{
	return Type.GetType("System." + typeCode.ToString());
}

bool IsNumeric(TypeCode typeCode)
{
	switch (typeCode)
    {
		case TypeCode.Byte:
		case TypeCode.Decimal:
		case TypeCode.Double:
		case TypeCode.Int16:
		case TypeCode.Int32:
		case TypeCode.Int64:
		case TypeCode.SByte:
		case TypeCode.Single:
		case TypeCode.UInt16:
		case TypeCode.UInt32:
		case TypeCode.UInt64:
		case TypeCode.Object:
			return true;

		default:
			return false;
    }
}
#>