#region License
/*
    This file is part of Sarcasm.

    Copyright 2012-2013 Dávid Németi

    Sarcasm is free software: you can redistribute it and/or modify
    it under the terms of the GNU Lesser General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    Sarcasm is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU Lesser General Public License for more details.

    You should have received a copy of the GNU Lesser General Public License
    along with Sarcasm.  If not, see <http://www.gnu.org/licenses/>.
*/
#endregion

<#@ template debug="true" hostspecific="false" language="C#" #>
<#@ assembly name="System.Core" #>
<#@ assembly name="PresentationCore" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Text" #>
<#@ import namespace="System.Collections.Generic" #>
<#@ import namespace="System.Reflection" #>
<#@ import namespace="System.Windows.Media" #>
<#@ output extension=".cs" #>

// GENERATED FILE
// NOTE: we store the resulted C# file in a separate file detached from the tt file since using the PresentationCore assembly during generation somehow causing problems for MSBuild

using System;

namespace Sarcasm.Unparsing.Styles
{
    public enum FontWeight { Normal, Bold, Thin }

    public enum TextDecoration { Baseline, OverLine, Strikethrough, Underline }

    public enum FontStyle { Normal, Italic }

    /// <summary>
    /// Describes how the baseline for a text-based element is positioned on the
    /// vertical axis, relative to the established baseline for text.
    /// </summary>
    public enum BaselineAlignment
    {
        // A baseline that is aligned to the upper edge of the containing box.
        Top,
        // A baseline that is aligned to the center of the containing box.
        Center,
        // A baseline that is aligned at the lower edge of the containing box.
        Bottom,
        // A baseline that is aligned at the actual baseline of the containing box.
        Baseline,
        // A baseline that is aligned at the upper edge of the text baseline.
        TextTop,
        // A baseline that is aligned at the lower edge of the text baseline.
        TextBottom,
        // A baseline that is aligned at the subscript position of the containing box.
        Subscript,
        // A baseline that is aligned at the superscript position of the containing box.
        Superscript
    }

    public enum FontStretch { Normal, Condensed, Expanded }

    public class FontFamily
    {
        static FontFamily()
        {
            GenericMonospace = new FontFamily("GenericMonospace");
            GenericSansSerif = new FontFamily("GenericSansSerif");
            GenericSerif = new FontFamily("GenericSerif");
        }

        public FontFamily(string name)
        {
            this.Name = name;
        }

        public string Name { get; private set; }

        public static FontFamily GenericMonospace { get; private set; }
        public static FontFamily GenericSansSerif { get; private set; }
        public static FontFamily GenericSerif { get; private set; }
    }

    public enum Color : uint
    {
<# 
foreach (PropertyInfo property in typeof(Colors).GetProperties())
{
    Color color = (Color)property.GetValue(null);
#>
        <#= string.Format("{0,-20}", property.Name) #> = (<#= color.A #>u << 24 | <#= color.R #>u << 16 | <#= color.G #>u << 8 | <#= color.B #>u),
<# 
}
#>
    }

    public static class ColorFactory
    {
        public static Color CreateColor(byte A, byte R, byte G, byte B)
        {
            return (Color) (((uint)A) << 24 | ((uint)R) << 16 | ((uint)G) << 8 | ((uint)B));
        }

        public static byte A(this Color color)
        {
            return (byte) ((((uint)color) & 0xFF000000) >> 24);
        }

        public static byte R(this Color color)
        {
            return (byte) ((((uint)color) & 0x00FF0000) >> 16);
        }

        public static byte G(this Color color)
        {
            return (byte) ((((uint)color) & 0x0000FF00) >> 8);
        }

        public static byte B(this Color color)
        {
            return (byte) ((((uint)color) & 0x000000FF) >> 0);
        }
    }
}
