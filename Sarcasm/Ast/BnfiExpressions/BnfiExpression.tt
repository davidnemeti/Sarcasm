<#@ template debug="true" hostSpecific="false" #>
<#@ output extension="generated.cs" #>
<#@ assembly Name="System.Core" #>
<#@ import namespace="System" #>
<#@ import namespace="System.IO" #>
<#@ import namespace="System.Diagnostics" #>
<#@ import namespace="System.Linq" #>
<#@ import namespace="System.Collections.Generic" #> 
<#@ include file="BnfiExpressionGeneration.ttinclude" #> 
<#
	WriteLine("// GENERATED FILE");
#>

using System;
using System.Collections.Generic;
using System.Linq;

using Irony;
using Irony.Ast;
using Irony.Parsing;

namespace Sarcasm.Ast
{
<#
	var bnfTermCoreTypeNamesForBnfiExpressionTerminals =
	GenerateBnfExpressionClassAndOperators(
		"BnfiExpressionTerminals",
		inheritFromBase: "BnfiExpression",
		implementInterfaces: new[]{"IBnfiExpression"},
		bnfTermCoreTypeNames: new[]{"BnfiTermNoAst", "BnfiTermKeyTerm"},
		bnfTermCoreExternTypeNames: new[]{"Terminal", "GrammarHint"},
		multiCore: true
	);

	var bnfTermCoreTypeNamesForBnfiExpressionKeyTermPunctuations =
	GenerateBnfExpressionClassAndOperators(
		"BnfiExpressionKeyTermPunctuations",
		inheritFromBase: "BnfiExpression",
		implementInterfaces: new[]{"IBnfiExpression"},
		bnfTermCoreTypeNames: new[]{"BnfiTermKeyTermPunctuation"},
		bnfTermCoreExternTypeNames: new[]{"GrammarHint"},
		multiCore: true
	);

	GenerateBnfExpressionClassAndOperators(
		"BnfiExpressionType",
		inheritFromBase: "BnfiExpression",
		implementInterfaces: new[]{"IBnfiExpression"},
		bnfTermCoreTypeNames: new[]{"BnfiTermMember", "BnfiTermCopyable"},
		bnfTermCoreExternTypeNames: new[]{"IBnfiTermCopyable"},
		bnfTermSideTypeNames: bnfTermCoreTypeNamesForBnfiExpressionTerminals,
		multiCore: true
	);

	GenerateBnfExpressionClassAndOperators(
		"BnfiExpressionType<T>",
		inheritFromBase: "BnfiExpressionType",
		implementInterfaces: new[]{"IBnfiExpression<T>"},
		bnfTermCoreTypeNames: new[]{"BnfiTermMember<TDeclaringType>", "BnfiTermCopyable<T>"},
		bnfTermCoreExternTypeNames: new[]{"IBnfiTermCopyable<T>"},
		bnfTermSideTypeNames: bnfTermCoreTypeNamesForBnfiExpressionTerminals,
		multiCore: true
	);

	var bnfTermCoreTypeNamesForBnfiExpressionValue =
	GenerateBnfExpressionClassAndOperators(
		"BnfiExpressionValue",
		inheritFromBase: "BnfiExpression",
		implementInterfaces: new[]{"IBnfiExpression"},
		bnfTermCoreTypeNames: new[]{"BnfiTermValue"},
		bnfTermSideTypeNames: bnfTermCoreTypeNamesForBnfiExpressionTerminals,
		multiCore: false
	);

	var bnfTermCoreTypeNamesForBnfiExpressionValueGeneric =
	GenerateBnfExpressionClassAndOperators(
		"BnfiExpressionValue<T>",
		inheritFromBase: "BnfiExpressionValue",
		implementInterfaces: new[]{"IBnfiExpression<T>"},
		bnfTermCoreTypeNames: new[]{"BnfiTermValue<T>"},
		bnfTermSideTypeNames: bnfTermCoreTypeNamesForBnfiExpressionTerminals,
		multiCore: false
	);

	// multiCore is false for BnfiExpressionChoice to achieve that only one non-(BnfiTermKeyTermPunctuation or GrammarHint) term would appear in a "Plus" expression

	GenerateBnfExpressionClassAndOperators(
		"BnfiExpressionChoice",
		inheritFromBase: "BnfiExpression",
		implementInterfaces: new[]{"IBnfiExpression"},
		bnfTermCoreTypeNames: new[]{"BnfiTermType", "BnfiTermChoice", "BnfiTermCollection"},
		bnfTermCoreExternTypeNames: bnfTermCoreTypeNamesForBnfiExpressionValue,
		bnfTermSideTypeNames: bnfTermCoreTypeNamesForBnfiExpressionKeyTermPunctuations,
		multiCore: false
	);

	GenerateBnfExpressionClassAndOperators(
		"BnfiExpressionChoice<T>",
		inheritFromBase: "BnfiExpressionChoice",
		implementInterfaces: new[]{"IBnfiExpression<T>"},
		bnfTermCoreTypeNames: new[]{"BnfiTermType<TType>", "BnfiTermConstant<T>", "BnfiTermChoice<TType>", "BnfiTermCollection<TCollectionType>"},
		bnfTermCoreExternTypeNames: bnfTermCoreTypeNamesForBnfiExpressionValueGeneric,
		bnfTermSideTypeNames: bnfTermCoreTypeNamesForBnfiExpressionKeyTermPunctuations,
		multiCore: false
	);
#>
}
